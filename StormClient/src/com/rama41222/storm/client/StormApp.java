/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rama41222.storm.client;

import com.google.gson.Gson;
import com.rama41222.storm.remote.client.TemperatureListenerInterface;
import com.rama41222.storm.remote.server.ClientManagerInterface;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * messos kubernett coreos
 *
 * @author Rama41222
 */
public class StormApp extends javax.swing.JFrame {

    private StormAppClientManager scm;
    private int posX = 0, posY = 0;

    /**
     * Creates new form StormApp
     */
    public StormApp() {
        initComponents();
        // Enabling the mouse drag functionality to the client app draggable panel
        draggablePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                posX = e.getX();
                posY = e.getY();
            }
        });

        draggablePanel.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent evt) {
                setLocation(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY);
            }
        });
    }
    public static final String DateFormat = "dd/MM/yyyy";
    public static final String timeFormat = "HH:MM:ss";

    public static String now() {
        Calendar cal = Calendar.getInstance();

        SimpleDateFormat format = new SimpleDateFormat(DateFormat);

        return format.format(cal.getTime());

    }

    public static String nowTime() {
        Calendar cal = Calendar.getInstance();

        SimpleDateFormat format = new SimpleDateFormat(timeFormat);

        return format.format(cal.getTime());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        draggablePanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        serverAddressTxt = new javax.swing.JTextField();
        serverPortTxt = new javax.swing.JTextField();
        usernameTxt = new javax.swing.JTextField();
        passwordTxt = new javax.swing.JPasswordField();
        clientsTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sensorsTxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        weatherAlertTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        weatherMonitorTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        locationsList = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        templbl = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        dateTxt = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        aflbl = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        humlbl = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        rflbl = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        timeTxt = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        draggablePanel.setBackground(new java.awt.Color(12, 35, 49));

        jButton1.setBackground(new java.awt.Color(12, 35, 49));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/storm/client/icons/ic_vpn_key_white_36dp_1x.png"))); // NOI18N
        jButton1.setText("Connect");
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        serverAddressTxt.setBackground(new java.awt.Color(38, 50, 56));
        serverAddressTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        serverAddressTxt.setForeground(new java.awt.Color(255, 255, 255));
        serverAddressTxt.setText("localhost");
        serverAddressTxt.setToolTipText("Server Address");
        serverAddressTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        serverAddressTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        serverAddressTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverAddressTxtMouseClicked(evt);
            }
        });

        serverPortTxt.setBackground(new java.awt.Color(38, 50, 56));
        serverPortTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        serverPortTxt.setForeground(new java.awt.Color(255, 255, 255));
        serverPortTxt.setText("1099");
        serverPortTxt.setToolTipText("Server Port");
        serverPortTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        serverPortTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        serverPortTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverPortTxtMouseClicked(evt);
            }
        });
        serverPortTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPortTxtActionPerformed(evt);
            }
        });

        usernameTxt.setBackground(new java.awt.Color(38, 50, 56));
        usernameTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        usernameTxt.setForeground(new java.awt.Color(255, 255, 255));
        usernameTxt.setText("admin");
        usernameTxt.setToolTipText("Sensor Name");
        usernameTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        usernameTxt.setMargin(new java.awt.Insets(4, 4, 10, 4));
        usernameTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameTxtMouseClicked(evt);
            }
        });
        usernameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTxtActionPerformed(evt);
            }
        });

        passwordTxt.setBackground(new java.awt.Color(38, 50, 56));
        passwordTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        passwordTxt.setForeground(new java.awt.Color(255, 255, 255));
        passwordTxt.setText("123");
        passwordTxt.setToolTipText("Your Password");
        passwordTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        passwordTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordTxtMouseClicked(evt);
            }
        });

        clientsTxt.setEditable(false);
        clientsTxt.setBackground(new java.awt.Color(38, 50, 56));
        clientsTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        clientsTxt.setForeground(new java.awt.Color(255, 255, 255));
        clientsTxt.setText("0");
        clientsTxt.setToolTipText("Server Port");
        clientsTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        clientsTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        clientsTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientsTxtMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Clients #: ");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Sensor #: ");

        sensorsTxt.setEditable(false);
        sensorsTxt.setBackground(new java.awt.Color(38, 50, 56));
        sensorsTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        sensorsTxt.setForeground(new java.awt.Color(255, 255, 255));
        sensorsTxt.setText("0");
        sensorsTxt.setToolTipText("Server Port");
        sensorsTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        sensorsTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        sensorsTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sensorsTxtMouseClicked(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(12, 35, 49));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/storm/client/icons/ic_close_white_36dp_1x.png"))); // NOI18N
        jButton2.setText("Close");
        jButton2.setToolTipText("Close the app");
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout draggablePanelLayout = new javax.swing.GroupLayout(draggablePanel);
        draggablePanel.setLayout(draggablePanelLayout);
        draggablePanelLayout.setHorizontalGroup(
            draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(draggablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sensorsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientsTxt)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, draggablePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2))))
        );
        draggablePanelLayout.setVerticalGroup(
            draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, draggablePanelLayout.createSequentialGroup()
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clientsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(sensorsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        jTabbedPane2.setBackground(new java.awt.Color(12, 35, 49));
        jTabbedPane2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTabbedPane2.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(0, 92, 122));

        weatherAlertTable.setAutoCreateRowSorter(true);
        weatherAlertTable.setBackground(new java.awt.Color(38, 50, 56));
        weatherAlertTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        weatherAlertTable.setForeground(new java.awt.Color(255, 255, 255));
        weatherAlertTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", null, ""}
            },
            new String [] {
                "Location", "Temperature  (C)", "Pressure (atm)", "Rainfaill (mm)", "Relative Humidity (%)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(weatherAlertTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel2);

        jTabbedPane2.addTab("Weather Alerts", jScrollPane1);

        jScrollPane2.setBackground(new java.awt.Color(12, 35, 49));
        jScrollPane2.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        weatherMonitorTable.setAutoCreateRowSorter(true);
        weatherMonitorTable.setBackground(new java.awt.Color(38, 50, 56));
        weatherMonitorTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        weatherMonitorTable.setForeground(new java.awt.Color(255, 255, 255));
        weatherMonitorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Location", "Temperature  (C)", "Pressure (atm)", "Rainfaill (mm)", "Relative Humidity (%)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(weatherMonitorTable);

        jTabbedPane2.addTab("Weather Monitoring Station", jScrollPane2);

        jScrollPane3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jPanel3.setBackground(new java.awt.Color(38, 50, 56));

        locationsList.setBackground(new java.awt.Color(12, 35, 49));
        locationsList.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        locationsList.setForeground(new java.awt.Color(255, 136, 0));
        locationsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        locationsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locationsListMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(locationsList);

        jPanel4.setBackground(new java.awt.Color(12, 35, 49));

        templbl.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        templbl.setForeground(new java.awt.Color(255, 255, 255));
        templbl.setText("TEMP");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(templbl, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(templbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(12, 35, 49));

        dateTxt.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        dateTxt.setForeground(new java.awt.Color(255, 255, 255));
        dateTxt.setText("Date");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel9.setBackground(new java.awt.Color(12, 35, 49));

        aflbl.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        aflbl.setForeground(new java.awt.Color(255, 255, 255));
        aflbl.setText("AF");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addComponent(aflbl, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aflbl, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel10.setBackground(new java.awt.Color(12, 35, 49));

        humlbl.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        humlbl.setForeground(new java.awt.Color(255, 255, 255));
        humlbl.setText("RH");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addComponent(humlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(humlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(12, 35, 49));

        rflbl.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        rflbl.setForeground(new java.awt.Color(255, 255, 255));
        rflbl.setText("RF");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rflbl, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rflbl, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(12, 35, 49));

        timeTxt.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        timeTxt.setForeground(new java.awt.Color(255, 255, 255));
        timeTxt.setText("Time");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(timeTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane6))
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel3);

        jTabbedPane2.addTab("On Demand Weather", jScrollPane3);

        jScrollPane5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(375, 375, 375)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(491, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(309, Short.MAX_VALUE))
        );

        jScrollPane5.setViewportView(jPanel7);

        jTabbedPane2.addTab("About", jScrollPane5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(draggablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(draggablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*
        * Set the date and time of the on demand weather feature.    
        * Creates a new Thread Task
        * instantiate StormAppClientManager
        * setting up the parameters serverAddressTxt.getText(), Integer.parseInt(serverPortTxt.getText()), passwordTxt.getPassword(), usernameTxt.getText(
        * taken from user interfacr to the StormAppClientManager object
        * then start the StormAppClient where the rmi registry will be located and invokes the remote methods will happen
         */
        dateTxt.setText(now());
        timeTxt.setText(nowTime());

        Thread StormAppClientTask = new Thread() {
            @Override
            public void run() {

                try {
                    scm = new StormAppClientManager();
                    scm.setSensorParams(serverAddressTxt.getText(), Integer.parseInt(serverPortTxt.getText()), passwordTxt.getPassword(), usernameTxt.getText());
                    scm.startStormAppClient();
                } catch (RemoteException | MalformedURLException ex) {
                    JOptionPane.showMessageDialog(new JFrame(), "StormAPP Error : " + ex.getMessage());
                }

            }

        };

        StormAppClientTask.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void serverAddressTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverAddressTxtMouseClicked
        serverAddressTxt.setText("");
    }//GEN-LAST:event_serverAddressTxtMouseClicked

    private void serverPortTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverPortTxtMouseClicked
        serverPortTxt.setText("");
    }//GEN-LAST:event_serverPortTxtMouseClicked

    private void usernameTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameTxtMouseClicked
        usernameTxt.setText("");
    }//GEN-LAST:event_usernameTxtMouseClicked

    private void usernameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTxtActionPerformed

    private void passwordTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordTxtMouseClicked
        passwordTxt.setText("");
    }//GEN-LAST:event_passwordTxtMouseClicked

    private void serverPortTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPortTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverPortTxtActionPerformed

    private void locationsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationsListMouseClicked
        /*
        * when a location is clicked on the location list, on ON DEMAND WEATHER UI, it will create a new thread and start to invoke the getLocationFromServer(location)
        * of the StormClientManager.
        * The task starts
         */
        Thread getLocationTask = new Thread() {

            @Override
            public void run() {
                String location = locationsList.getSelectedValue();
                try {
                    scm.getLocationFromServer(location);
                } catch (RemoteException ex) {
                    System.out.println(ex);
                }
            }

        };
        getLocationTask.start();

    }//GEN-LAST:event_locationsListMouseClicked

    private void clientsTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientsTxtMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_clientsTxtMouseClicked

    private void sensorsTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sensorsTxtMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_sensorsTxtMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            if (scm != null) {
                scm.removeme();
                System.exit(0);
            } else {
                System.exit(0);
            }
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Error :" + ex.getLocalizedMessage());
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StormApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StormApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aflbl;
    private javax.swing.JTextField clientsTxt;
    private javax.swing.JLabel dateTxt;
    private javax.swing.JPanel draggablePanel;
    private javax.swing.JLabel humlbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JList<String> locationsList;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JLabel rflbl;
    private javax.swing.JTextField sensorsTxt;
    private javax.swing.JTextField serverAddressTxt;
    private javax.swing.JTextField serverPortTxt;
    private javax.swing.JLabel templbl;
    private javax.swing.JLabel timeTxt;
    private javax.swing.JTextField usernameTxt;
    private javax.swing.JTable weatherAlertTable;
    private javax.swing.JTable weatherMonitorTable;
    // End of variables declaration//GEN-END:variables

    private class StormAppClientManager extends UnicastRemoteObject implements
            TemperatureListenerInterface {

        private final ConcurrentMap<String, WeatherData> weatherDataList = new ConcurrentHashMap<>();
        private final ConcurrentMap<String, WeatherData> weatherAlertList = new ConcurrentHashMap<>();
        private final CopyOnWriteArrayList<String> locations = new CopyOnWriteArrayList<>();
        //ArrayList<String> arrayList = new ArrayList<>();
        private StormAppClientManager tempListener;
        private ClientManagerInterface stormClientManager;
        private WeatherData wd = new WeatherData();
        Gson g = new Gson();
        private String serverAddress;
        private int serverPort = 0;
        private String clientPassword;
        private String clientUserName;
        private StormApp ui;

        public StormAppClientManager() throws RemoteException {

        }

        void removeme() throws RemoteException {
            stormClientManager.removeTemperatureListener(tempListener);

        }

        // Setting up the required parameters to search for a RMI registry and invoke the correct method via remote object
        void setSensorParams(String serverAddress, int serverPort, char[] clientPassword, String clientUserName) {
            this.serverAddress = serverAddress;
            this.serverPort = serverPort;
            this.clientPassword = new String(clientPassword);
            this.clientUserName = clientUserName;
        }

        public void startStormAppClient() throws RemoteException, MalformedURLException {

            try {
                //locating the serer's rmi registry
                Registry myreg = LocateRegistry.getRegistry(this.serverAddress, this.serverPort);
                //looking uo for the remote object if stormClientManager by using storm_server keyword (we have exposed the remote interface
                // from the server side uising this name "storm_server")
                stormClientManager = (ClientManagerInterface) myreg.lookup("storm_server");
                //after successfully getting the remote instane, throgh that instance from server, the client is going to authenticate
                if (stormClientManager.authentication(this.clientPassword)) {
                    System.out.println("Login Success!");
                    //After login is success the client interface will be added to the serverers listeners list where server is able to invkoe the 
                    //remote method of the client
                    tempListener = new StormAppClientManager();
                    stormClientManager.addTemperatureListener(tempListener);
                } else {
                    //when an error is occrued, the temperature listener will be removed and authentication failed error will be displayed
                    stormClientManager.removeTemperatureListener(tempListener);
                    JOptionPane.showMessageDialog(new JFrame(), "Authentication failed, Please check your login credentials and retry again");

                }

            } catch (RemoteException | NotBoundException re) {

                stormClientManager.removeTemperatureListener(tempListener);
                JOptionPane.showMessageDialog(new JFrame(), "Error Occured : " + re.getLocalizedMessage());

            }

        }

        //getting ondemand weather update from server by supplying a location
        public void getLocationFromServer(String loc) throws RemoteException {
            String weather = stormClientManager.onDemandWeather(loc);
            WeatherData wobj = g.fromJson(weather, WeatherData.class);
            if (wobj.getHumidity().contains("Sensor")) {
                templbl.setText(wobj.getTemperature());
                rflbl.setText(wobj.getRainfall());
                aflbl.setText(wobj.getPressure());
                humlbl.setText(wobj.getHumidity());
            } else {
                templbl.setText(wobj.getTemperature() + " °C");
                rflbl.setText(wobj.getRainfall() + " mm");
                aflbl.setText(wobj.getPressure() + " atm");
                humlbl.setText(wobj.getHumidity() + " %");
            }
        }

        //refreshing the weater monitoring table
        public void refreshWeatherMonitor() {
            Set mapkeys = weatherDataList.keySet();
            DefaultTableModel model = (DefaultTableModel) weatherMonitorTable.getModel();
            for (Object key : mapkeys) {
                WeatherData wdx = weatherDataList.get(key);
                Object[] row = {wdx.getLocation(), wdx.getTemperature(), wdx.getPressure(), wdx.getRainfall(), wdx.getHumidity()};
                if (!locations.contains(wdx.getLocation())) {
                    locations.add(wdx.getLocation());
                }
                model.addRow(row);
            }

        }

        //refreshing the whether alrets table
        public void refreshWeatherAlerts() {
            Set mapkeys = weatherAlertList.keySet();
            DefaultTableModel model = (DefaultTableModel) weatherAlertTable.getModel();
            for (Object key : mapkeys) {
                WeatherData wdx = weatherAlertList.get(key);
                Object[] row = {wdx.getLocation(), wdx.getTemperature(), wdx.getPressure(), wdx.getRainfall(), wdx.getHumidity()};
                if (!locations.contains(wdx.getLocation())) {
                    locations.add(wdx.getLocation());
                }
                model.addRow(row);

            }

        }

        //Saving weatehr data location in the locationsList only if the location is new
        private void addWeatherData() {
            DefaultListModel onlineLocationListModel = new DefaultListModel();
            locations.stream().forEach((loca) -> {
                onlineLocationListModel.addElement(loca);
            });
            locationsList.setModel(onlineLocationListModel);
        }

        //changes the weatherData table whenever a temperature change occurs
        @Override
        public void weatherChanged(String json) {

            wd = g.fromJson(json, WeatherData.class);
            weatherDataList.put(wd.getLocation(), wd);
            refreshWeatherMonitor();
            addWeatherData();

        }

        //Updates the alert table when a weather alert comes
        @Override
        public void weatherAlert(String json) throws RemoteException {

            wd = g.fromJson(json, WeatherData.class);
            weatherAlertList.put(wd.getLocation(), wd);
            refreshWeatherAlerts();
            weatherDataList.put(wd.getLocation(), wd);
            refreshWeatherMonitor();
            addWeatherData();
        }

        //Sensor Count updater
        @Override
        public void updateSensorCount(int sc) throws RemoteException {
            sensorsTxt.setText(sc + "");
        }

        //Client Count updater
        @Override
        public void updateClientCount(int j) throws RemoteException {
            clientsTxt.setText(j + "");
        }

    }
}
