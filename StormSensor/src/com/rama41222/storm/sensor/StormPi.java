/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rama41222.storm.sensor;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Rama41222
 */
public class StormPi extends javax.swing.JFrame implements WritableGUI {

    StormPiManager sk;
    private int posX = 0, posY = 0;
    /**
     * Creates new form StormPi
     */
    public StormPi() {
        initComponents();
         // Enabling the mouse drag functionality to the client app draggable panel
        draggablePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                posX = e.getX();
                posY = e.getY();
            }
        });
        //Making the draggablePanel movable when the mouse drags since the original close and  drag actions have been disabled
        draggablePanel.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent evt) {
                setLocation(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY);
            }
        });
    }
    //turing the sensor on by staring all the threads of temperature, pressure, rainfall and humidity
    private void turnON() {
        powerToggle.setText("Power OFF");
        sk = new StormPiManager(this);
        sk.startSensors();
    }
    //stops all the threads of temperature, pressure, rainfall and humidity
    private void turnOFF() {
        powerToggle.setText("Power ON");
        sk.stopSensors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        draggablePanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        serverAddressTxt = new javax.swing.JTextField();
        serverPortTxt = new javax.swing.JTextField();
        powerToggle = new javax.swing.JToggleButton();
        usernameTxt = new javax.swing.JTextField();
        passwordTxt = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tileHum = new javax.swing.JPanel();
        lblHum = new javax.swing.JLabel();
        tileAP = new javax.swing.JPanel();
        lblAP = new javax.swing.JLabel();
        tileRF = new javax.swing.JPanel();
        lblRF = new javax.swing.JLabel();
        tileAP1 = new javax.swing.JPanel();
        lblTemp = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorLog = new javax.swing.JTextArea();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StormPI Sensor");
        setUndecorated(true);
        setResizable(false);

        draggablePanel.setBackground(new java.awt.Color(12, 35, 49));

        jButton1.setBackground(new java.awt.Color(12, 35, 49));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/storm/sensor/icons/ic_vpn_key_white_36dp_1x.png"))); // NOI18N
        jButton1.setText("Connect");
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        serverAddressTxt.setBackground(new java.awt.Color(38, 50, 56));
        serverAddressTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        serverAddressTxt.setForeground(new java.awt.Color(255, 255, 255));
        serverAddressTxt.setText("localhost");
        serverAddressTxt.setToolTipText("Server Address");
        serverAddressTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        serverAddressTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        serverAddressTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverAddressTxtMouseClicked(evt);
            }
        });

        serverPortTxt.setBackground(new java.awt.Color(38, 50, 56));
        serverPortTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        serverPortTxt.setForeground(new java.awt.Color(255, 255, 255));
        serverPortTxt.setText("9001");
        serverPortTxt.setToolTipText("Server Port");
        serverPortTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        serverPortTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        serverPortTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverPortTxtMouseClicked(evt);
            }
        });

        powerToggle.setBackground(new java.awt.Color(12, 35, 49));
        powerToggle.setForeground(new java.awt.Color(255, 255, 255));
        powerToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/storm/sensor/icons/ic_power_settings_new_white_36dp_1x.png"))); // NOI18N
        powerToggle.setText("Power ON");
        powerToggle.setToolTipText("");
        powerToggle.setBorderPainted(false);
        powerToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerToggleActionPerformed(evt);
            }
        });

        usernameTxt.setBackground(new java.awt.Color(38, 50, 56));
        usernameTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        usernameTxt.setForeground(new java.awt.Color(255, 255, 255));
        usernameTxt.setText("test");
        usernameTxt.setToolTipText("Sensor Name");
        usernameTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        usernameTxt.setMargin(new java.awt.Insets(4, 4, 10, 4));
        usernameTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameTxtMouseClicked(evt);
            }
        });
        usernameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTxtActionPerformed(evt);
            }
        });

        passwordTxt.setBackground(new java.awt.Color(38, 50, 56));
        passwordTxt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        passwordTxt.setForeground(new java.awt.Color(255, 255, 255));
        passwordTxt.setText("test");
        passwordTxt.setToolTipText("Password");
        passwordTxt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        jButton2.setBackground(new java.awt.Color(12, 35, 49));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/storm/sensor/icons/ic_close_white_36dp_1x.png"))); // NOI18N
        jButton2.setText("Close");
        jButton2.setToolTipText("Close the app");
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout draggablePanelLayout = new javax.swing.GroupLayout(draggablePanel);
        draggablePanel.setLayout(draggablePanelLayout);
        draggablePanelLayout.setHorizontalGroup(
            draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(draggablePanelLayout.createSequentialGroup()
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(powerToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        draggablePanelLayout.setVerticalGroup(
            draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(draggablePanelLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(powerToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jPanel2.setBackground(new java.awt.Color(38, 50, 56));

        tileHum.setBackground(new java.awt.Color(12, 35, 49));
        tileHum.setPreferredSize(new java.awt.Dimension(0, 115));

        lblHum.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblHum.setForeground(new java.awt.Color(255, 136, 0));
        lblHum.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblHum.setText("RH");
        lblHum.setToolTipText("");

        javax.swing.GroupLayout tileHumLayout = new javax.swing.GroupLayout(tileHum);
        tileHum.setLayout(tileHumLayout);
        tileHumLayout.setHorizontalGroup(
            tileHumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tileHumLayout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addComponent(lblHum, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tileHumLayout.setVerticalGroup(
            tileHumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileHumLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHum, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        tileAP.setBackground(new java.awt.Color(12, 35, 49));
        tileAP.setPreferredSize(new java.awt.Dimension(0, 115));

        lblAP.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblAP.setForeground(new java.awt.Color(255, 136, 0));
        lblAP.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAP.setText("AP");

        javax.swing.GroupLayout tileAPLayout = new javax.swing.GroupLayout(tileAP);
        tileAP.setLayout(tileAPLayout);
        tileAPLayout.setHorizontalGroup(
            tileAPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tileAPLayout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addComponent(lblAP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tileAPLayout.setVerticalGroup(
            tileAPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileAPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAP, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        tileRF.setBackground(new java.awt.Color(12, 35, 49));
        tileRF.setPreferredSize(new java.awt.Dimension(0, 115));

        lblRF.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblRF.setForeground(new java.awt.Color(255, 136, 0));
        lblRF.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblRF.setText("RF");

        javax.swing.GroupLayout tileRFLayout = new javax.swing.GroupLayout(tileRF);
        tileRF.setLayout(tileRFLayout);
        tileRFLayout.setHorizontalGroup(
            tileRFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tileRFLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(lblRF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tileRFLayout.setVerticalGroup(
            tileRFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileRFLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRF, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        tileAP1.setBackground(new java.awt.Color(12, 35, 49));
        tileAP1.setPreferredSize(new java.awt.Dimension(0, 115));

        lblTemp.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblTemp.setForeground(new java.awt.Color(255, 136, 0));
        lblTemp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTemp.setText("TEMP");

        javax.swing.GroupLayout tileAP1Layout = new javax.swing.GroupLayout(tileAP1);
        tileAP1.setLayout(tileAP1Layout);
        tileAP1Layout.setHorizontalGroup(
            tileAP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tileAP1Layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(lblTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tileAP1Layout.setVerticalGroup(
            tileAP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileAP1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTemp, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        sensorLog.setEditable(false);
        sensorLog.setBackground(new java.awt.Color(12, 35, 49));
        sensorLog.setColumns(20);
        sensorLog.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        sensorLog.setForeground(new java.awt.Color(255, 255, 255));
        sensorLog.setRows(5);
        sensorLog.setText("Sensor is Offline");
        sensorLog.setWrapStyleWord(true);
        jScrollPane1.setViewportView(sensorLog);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tileAP, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tileAP1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tileHum, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tileRF, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tileHum, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tileRF, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tileAP, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tileAP1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(draggablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(draggablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         //sets the server url, server port username and password from the gui to the StormPIManager Object and runs the runSensorProtocol method 
         // which starts the protocol which socket communications are running. (until there;s input from Storm Server, this method will run)
        sensorLog.setText("Sensor is trying to connect to the server\n"+sensorLog.getText());
        sk.setSensorParams(serverAddressTxt.getText(), Integer.parseInt(serverPortTxt.getText()), passwordTxt.getPassword(), usernameTxt.getText());
        Thread task = new Thread() {
            @Override
            public void run() {
                try {
                    sk.runSensorProtocol();
                } catch (InterruptedException ex) {
                    System.out.println(ex.getLocalizedMessage());
                }
            }
        };
        
        //Task Started
        task.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void serverAddressTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverAddressTxtMouseClicked
        serverAddressTxt.setText("");
    }//GEN-LAST:event_serverAddressTxtMouseClicked

    private void serverPortTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverPortTxtMouseClicked
        serverPortTxt.setText("");
    }//GEN-LAST:event_serverPortTxtMouseClicked

    private void powerToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerToggleActionPerformed
        //Power on and off of sensor 
        sensorLog.setText("Sensor Turned On"+"\n"+sensorLog.getText());
        if (powerToggle.isSelected()) {
            turnON();
        } else {
            turnOFF();

        }
    }//GEN-LAST:event_powerToggleActionPerformed

    private void usernameTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameTxtMouseClicked
        usernameTxt.setText("");
    }//GEN-LAST:event_usernameTxtMouseClicked

    private void usernameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTxtActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StormPi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StormPi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StormPi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StormPi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StormPi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel draggablePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAP;
    private javax.swing.JLabel lblHum;
    private javax.swing.JLabel lblRF;
    private javax.swing.JLabel lblTemp;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JToggleButton powerToggle;
    private javax.swing.JTextArea sensorLog;
    private javax.swing.JTextField serverAddressTxt;
    private javax.swing.JTextField serverPortTxt;
    private javax.swing.JPanel tileAP;
    private javax.swing.JPanel tileAP1;
    private javax.swing.JPanel tileHum;
    private javax.swing.JPanel tileRF;
    private javax.swing.JTextField usernameTxt;
    // End of variables declaration//GEN-END:variables
    //update temperautre of the gui
    @Override
    public void updateTemperature(double temp) {
        lblTemp.setText(Double.toString(temp) + " °C");
    }
    //update humiduty of the gui
    @Override
    public void updateHumidity(double humidity) {
        lblHum.setText(Double.toString(humidity)+" %");
    }
    //update pressure of the gui
    @Override
    public void updateBarometer(double pressure) {
        lblAP.setText(Double.toString(pressure)+ " atm");
    }
    //update rainfall of the gui
    @Override
    public void updateRainfall(double rainfall) {
        lblRF.setText(Double.toString(rainfall) + " mm");
    }   
    //Setting username and password
    @Override
    public void updateUser(String username, String password) {
        usernameTxt.setText(username);
        passwordTxt.setText(password);
    }
    //Updates the location of StormPI "Colombo sensor is online" , the location is taken from this
    @Override
    public void updateLocation(String location) {
        sensorLog.setText(location+"\n"+sensorLog.getText());
    }
    //updates the log of StormPI
    @Override
    public void updateLogs(String log) {
        sensorLog.setText(log+"\n"+sensorLog.getText());
    }

}
